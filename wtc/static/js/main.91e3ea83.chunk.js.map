{"version":3,"sources":["Content.jsx","App.jsx","index.js"],"names":["secondsToHms","originalSeconds","totalSeconds","hours","Math","floor","minutes","seconds","Content","props","console","log","data","labels","map","e","date","filter","v","i","a","indexOf","options","responsive","plugins","legend","position","tooltip","callbacks","footer","tooltipItems","parsed","y","daySeconds","label","total","reduce","b","flaw","overtime","datasets","type","backgroundColor","borderColor","fill","pointRadius","flawsCompensatedByOvertime","didCompensate","style","display","flexDirection","alignItems","justifyContent","height","maxWidth","color","src","process","papaparseOptions","header","dynamicTyping","skipEmptyLines","transformHeader","toLowerCase","replace","App","React","useState","setData","className","cssClass","onFileLoaded","fileInfo","day","start","end","sort","Date","parserOptions","ChartJS","register","LineElement","CategoryScale","LinearScale","BarElement","Title","Tooltip","PointElement","LineController","Legend","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.91e3ea83.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\n\r\nfunction convertHmsStringToSeconds(hms) {\r\n  const [hours, minutes, seconds] = hms.split(\":\");\r\n  const totalSeconds = +hours * 60 * 60 + +minutes * 60 + +seconds;\r\n  return totalSeconds;\r\n}\r\n\r\nfunction secondsToHms(originalSeconds) {\r\n  var totalSeconds = originalSeconds;\r\n  let hours = Math.floor(totalSeconds / 3600);\r\n  totalSeconds %= 3600;\r\n  let minutes = Math.floor(totalSeconds / 60);\r\n  let seconds = totalSeconds % 60;\r\n  return `${hours}:${minutes}:${seconds}`;\r\n}\r\n\r\nfunction getDurationOfTahoTime(entry) {\r\n  return entry.total * 3600;\r\n}\r\n\r\nexport default function Content(props) {\r\n  console.log(props.data);\r\n\r\n  const labels = props.data\r\n    .map((e) => e.date)\r\n    .filter((v, i, a) => a.indexOf(v) === i);\r\n\r\n  const footer = (tooltipItems) => {\r\n    var totalSeconds = tooltipItems[0].parsed.y;\r\n    return `Duration: ${secondsToHms(totalSeconds)}`;\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    plugins: {\r\n      legend: {\r\n        position: \"top\",\r\n      },\r\n      tooltip: {\r\n        callbacks: {\r\n          footer: footer,\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  const eightHours = 28800;\r\n\r\n  const daySeconds = labels.map((label) => {\r\n    const seconds = props.data\r\n      .filter((e) => e.date == label)\r\n      .map((e) => getDurationOfTahoTime(e))\r\n      .reduce((a, b) => a + b, 0);\r\n    const flaw = seconds < eightHours ? eightHours - seconds : 0;\r\n    const overtime = seconds > eightHours ? seconds - eightHours : 0;\r\n    console.log({ seconds, flaw, overtime, label });\r\n    return {\r\n      label,\r\n      seconds,\r\n      flaw,\r\n      overtime,\r\n    };\r\n  });\r\n\r\n  const data = {\r\n    labels,\r\n    datasets: [\r\n      {\r\n        type: \"line\",\r\n        label: \"Norm of hours per day\",\r\n        backgroundColor: \"yellowgreen\",\r\n        borderColor: \"yellowgreen\",\r\n        fill: true,\r\n        data: daySeconds.map((e) => eightHours),\r\n        pointRadius: 0,\r\n      },\r\n      {\r\n        label: \"Shortage\",\r\n        data: daySeconds.map((e) => [e.seconds, e.seconds + e.flaw]),\r\n        backgroundColor: \"red\",\r\n      },\r\n      {\r\n        label: \"Work time duration\",\r\n        data: daySeconds.map((e) => [0, e.seconds]),\r\n        backgroundColor: \"grey\",\r\n      },\r\n      {\r\n        label: \"Overtimes\",\r\n        data: daySeconds.map((e) => [\r\n          e.seconds - e.overtime,\r\n          e.seconds + e.overtime,\r\n        ]),\r\n        backgroundColor: \"green\",\r\n      },\r\n    ],\r\n  };\r\n\r\n  const allFlaws = daySeconds.map((e) => e.flaw).reduce((a, b) => a + b, 0);\r\n  const allOvertimes = daySeconds\r\n    .map((e) => e.overtime)\r\n    .reduce((a, b) => a + b, 0);\r\n\r\n  const flawsCompensatedByOvertime = allFlaws - allOvertimes;\r\n  const didCompensate = flawsCompensatedByOvertime <= 0;\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n      }}\r\n    >\r\n      <div style={{ height: 32 }} />\r\n      <Bar\r\n        options={options}\r\n        data={data}\r\n        height=\"75vh\"\r\n        style={{ maxWidth: \"1500px\" }}\r\n      />\r\n      <div style={{ height: 32 }} />\r\n      <h4 style={{ color: didCompensate ? \"green\" : \"red\" }}>\r\n        Shortage compensated by overtime:{\" \"}\r\n        {secondsToHms(flawsCompensatedByOvertime)} ({flawsCompensatedByOvertime}{\" \"}\r\n        seconds) ({didCompensate ? \"COMPENSATED! üí™\" : \"NOT COMPENSATED ‚òπÔ∏è\"})\r\n      </h4>\r\n      <img src={`${process.env.PUBLIC_URL}/cm.png`} />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport CSVReader from \"react-csv-reader\";\nimport \"./App.css\";\nimport Content from \"./Content\";\n\nconst papaparseOptions = {\n  header: true,\n  dynamicTyping: true,\n  skipEmptyLines: true,\n  transformHeader: (header) => header.toLowerCase().replace(/\\W/g, \"_\"),\n};\n\nexport default function App() {\n  const [data, setData] = React.useState();\n\n  const handleForce = (data, fileInfo) => {\n    setData(\n      data\n        .filter((day) => day.start && day.end)\n        .sort((a, b) => new Date(a.date) - new Date(b.date))\n    );\n  };\n\n  return (\n    <div className=\"container\">\n      <CSVReader\n        cssClass=\"react-csv-input\"\n        label=\"Select CSV from Taho start end of work (only single user and project)\"\n        onFileLoaded={handleForce}\n        parserOptions={papaparseOptions}\n      />\n      {data && <Content data={data} />}\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  LineElement,\n  LineController,\n  Legend,\n  PointElement,\n} from \"chart.js\";\n\nChartJS.register(\n  LineElement,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  PointElement,\n  LineController,\n  Legend\n);\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}