{"version":3,"sources":["Content.jsx","App.jsx","index.js"],"names":["secondsToHms","originalSeconds","totalSeconds","hours","Math","floor","minutes","seconds","Content","props","console","log","data","labels","map","e","start_date","filter","v","i","a","indexOf","options","responsive","plugins","legend","position","tooltip","callbacks","footer","tooltipItems","parsed","y","daySeconds","label","hms","split","convertHmsStringToSeconds","duration","reduce","partialSum","flaw","overtime","datasets","type","backgroundColor","borderColor","fill","pointRadius","allFlaws","b","allOvertimes","flawsCompensatedByOvertime","didCompensate","style","display","flexDirection","alignItems","justifyContent","height","maxWidth","color","ChartJS","register","LineElement","CategoryScale","LinearScale","BarElement","Title","Tooltip","PointElement","Legend","papaparseOptions","header","dynamicTyping","skipEmptyLines","transformHeader","toLowerCase","replace","App","React","useState","setData","className","cssClass","onFileLoaded","fileInfo","parserOptions","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0b5b5c65.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  LineElement,\r\n  Legend,\r\n  PointElement,\r\n} from \"chart.js\";\r\nimport { Bar } from \"react-chartjs-2\";\r\n\r\nChartJS.register(\r\n  LineElement,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  PointElement,\r\n  Legend\r\n);\r\n\r\nfunction convertHmsStringToSeconds(hms) {\r\n  const [hours, minutes, seconds] = hms.split(\":\");\r\n  const totalSeconds = +hours * 60 * 60 + +minutes * 60 + +seconds;\r\n  return totalSeconds;\r\n}\r\n\r\nfunction secondsToHms(originalSeconds) {\r\n  var totalSeconds = originalSeconds;\r\n  let hours = Math.floor(totalSeconds / 3600);\r\n  totalSeconds %= 3600;\r\n  let minutes = Math.floor(totalSeconds / 60);\r\n  let seconds = totalSeconds % 60;\r\n  return `${hours}:${minutes}:${seconds}`;\r\n}\r\n\r\nexport default function Content(props) {\r\n  console.log(props.data);\r\n\r\n  const labels = props.data\r\n    .map((e) => e.start_date)\r\n    .filter((v, i, a) => a.indexOf(v) === i);\r\n\r\n  const footer = (tooltipItems) => {\r\n    var totalSeconds = tooltipItems[0].parsed.y;\r\n    return `Duration: ${secondsToHms(totalSeconds)}`;\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    plugins: {\r\n      legend: {\r\n        position: \"top\",\r\n      },\r\n      tooltip: {\r\n        callbacks: {\r\n          footer: footer,\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  const eightHours = 28800;\r\n\r\n  const daySeconds = labels.map((label) => {\r\n    const seconds = props.data\r\n      .filter((e) => e.start_date == label)\r\n      .map((e) => convertHmsStringToSeconds(e.duration))\r\n      .reduce((partialSum, a) => partialSum + a, 0);\r\n    const flaw = seconds < eightHours ? eightHours - seconds : 0;\r\n    const overtime = seconds > eightHours ? seconds - eightHours : 0;\r\n    return {\r\n      label,\r\n      seconds,\r\n      flaw,\r\n      overtime,\r\n    };\r\n  });\r\n\r\n  const data = {\r\n    labels,\r\n    datasets: [\r\n      {\r\n        type: \"line\",\r\n        label: \"Norm of hours per day\",\r\n        backgroundColor: \"yellowgreen\",\r\n        borderColor: \"yellowgreen\",\r\n        fill: true,\r\n        data: daySeconds.map((e) => eightHours),\r\n        pointRadius: 0,\r\n      },\r\n      {\r\n        label: \"Shortage\",\r\n        data: daySeconds.map((e) => [e.seconds, e.seconds + e.flaw]),\r\n        backgroundColor: \"red\",\r\n      },\r\n      {\r\n        label: \"Work time duration\",\r\n        data: daySeconds.map((e) => [0, e.seconds]),\r\n        backgroundColor: \"grey\",\r\n      },\r\n      {\r\n        label: \"Overtimes\",\r\n        data: daySeconds.map((e) => [\r\n          e.seconds - e.overtime,\r\n          e.seconds + e.overtime,\r\n        ]),\r\n        backgroundColor: \"green\",\r\n      },\r\n    ],\r\n  };\r\n\r\n  const allFlaws = daySeconds.map((e) => e.flaw).reduce((a, b) => a + b, 0);\r\n  const allOvertimes = daySeconds\r\n    .map((e) => e.overtime)\r\n    .reduce((a, b) => a + b, 0);\r\n\r\n  const flawsCompensatedByOvertime = allFlaws - allOvertimes;\r\n  const didCompensate = flawsCompensatedByOvertime <= 0;\r\n\r\n  console.log({ allFlaws, allOvertimes, flawsCompensatedByOvertime });\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n      }}\r\n    >\r\n      <div style={{ height: 32 }} />\r\n      <Bar\r\n        options={options}\r\n        data={data}\r\n        height=\"75vh\"\r\n        style={{ maxWidth: \"1500px\" }}\r\n      />\r\n      <div style={{ height: 32 }} />\r\n      <h4 style={{ color: didCompensate ? \"green\" : \"red\" }}>\r\n        Shortage compensated by overtime:{\" \"}\r\n        {secondsToHms(flawsCompensatedByOvertime)} ({flawsCompensatedByOvertime}{\" \"}\r\n        seconds) ({didCompensate ? \"COMPENSATED! üí™\" : \"NOT COMPENSATED ‚òπÔ∏è\"})\r\n      </h4>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport CSVReader from \"react-csv-reader\";\nimport \"./App.css\";\nimport Content from \"./Content\";\n\n\nconst papaparseOptions = {\n  header: true,\n  dynamicTyping: true,\n  skipEmptyLines: true,\n  transformHeader: (header) => header.toLowerCase().replace(/\\W/g, \"_\"),\n};\n\nexport default function App() {\n  const [data, setData] = React.useState();\n\n  const handleForce = (data, fileInfo) => { setData(data); };\n\n  return (\n    <div className=\"container\">\n      <CSVReader\n        cssClass=\"react-csv-input\"\n        label=\"Select CSV exported from Toggl Track reports, detailed report for month\"\n        onFileLoaded={handleForce}\n        parserOptions={papaparseOptions}\n      />\n      {data && <Content data={data}/>}\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}